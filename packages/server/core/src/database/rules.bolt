// ------------------------------------
// Types
// ------------------------------------

// General Types
type Alpha extends String {
  validate() { this.test(/^[a-zA-Z]*$/) }
}

type Alphanumeric extends String{
  validate() { this.test(/^[a-zA-Z0-9]*$/) }
}

type Ascii extends String {
  validate() { this.test(/^[\x00-\x7F]+$/) }
}

type Base64 extends String {
  validate() { this.test(/[^A-Z0-9+\/=]/i) }
}

type CreditCard extends String {
  validate() { this.test(/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$/) }
}

type URL extends String {
  validate() { this.startsWith('http') }
}

type DataURI extends String {
  validate() { this.test(/^\s*data:([a-z]+\/[a-z0-9\-\+]+(;[a-z\-]+\=[a-z0-9\-]+)?)?(;base64)?,[a-z0-9\!\$\&\'\,\(\)\*\+\,\;\=\-\.\_\~\:\@\/\?\%\s]*\s*$/i) }
}

type Date extends String {
  validate() { this.test(/^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?(Z)?$/) }
}

type Decimal extends String {
  validate() { this.test(/^[-+]?([0-9]+|\.[0-9]+|[0-9]+\.[0-9]+)$/) }
}

type Email extends String {
  validate() { this.test(/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/) }
}

type Float extends String {
  validate() { this.test(/^(?:[-+]?(?:[0-9]+))?(?:\.[0-9]*)?(?:[eE][\+\-]?(?:[0-9]+))?$/) }
}

type Hexadecimal extends String {
  validate() { this.test(/^[0-9A-F]+$/i) }
}

type HexColor extends String {
  validate() { this.test(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i) }
}

type IPv4 extends String {
  validate() { this.test(/^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/) }
}

type IPv6 extends String {
  validate() { this.test(/^[0-9A-F]{1,4}$/i) }
}

type ISIN extends String {
  validate() { this.test(/^[A-Z]{2}[0-9A-Z]{9}[0-9]$/) }
}

type ISO8601 extends String {
  validate() { this.test(/^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/) }
}

type LowercaseAlpha extends String {
  validate() { this.test(/^[a-z]$/) }
}

type UppercaseAlpha extends String {
  validate() { this.test(/^[A-Z]$/) }
}

type MACAddress extends String {
  validate() { this.test(/^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$/) }
}

type SocialSecurity extends String {
  validate() { this.test(/^\d\d\d-\d\d-\d\d\d\d$/) }
}

type Multibyte extends String {
  validate() { this.test(/[^\x00-\x7F]/) }
}

type UUID extends String {
  validate() { this.test(/^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i) }
}

type True extends Boolean {
  validate() { this == true }
}

type Price extends Number {
  validate() { this >= 0 && this <= 999999999 }
}

type PhoneNumber extends String {
  validate() {
    this.test(/^(\+357\d{8})|(\+30\d{10})$/i) // Cyprus and Greece only
  }
}

type PositiveNumber extends Number {
  validate() {
    this > 0
  }
}

type CurrentTimestamp extends Number {
  validate() { this == now }
}

type InitialTimestamp extends Number {
  validate() { initial(this, now) }
}

type Geoposition {
  latitude: Number,
  longitude: Number,
}

// Application Types
type Address {
  street: String | Null,
  city: String | Null
  postalCode: String | Null,
  country: String,
}

type Location {
  geoposition: Geoposition,
  address: Address,
}

type UserLocation extends Location {
  source: String
}

type Locale {
  id: String,
  language: String,
  region: String,
}

type Category {
  id: String,
  order: Number,
  requireAdult: Boolean | Null,
}

type Dimensions {
  width: PositiveNumber,
  height: PositiveNumber,
  type: String,
}

type Image {
  name: String,
  fullPath: String,
  downloadURL: URL,
  contentType: String | Null,
  size: Number | Null,
  createdAt: Number | Null,
}

type Task {
  createdAt: CurrentTimestamp
}

type CompletedTask {
  createdAt: Number
}

type TaskResult {
  status: String,
  comment: String | Null,

  validate() {
    (this.status == 'accepted') ||
    (this.status == 'rejected')
  }
}

type ReviewAdTask extends Task {
  beforeAd: PublishableAd | Null, // this is null when ad was created
  afterAd: PublishableAd,
}

type ReviewAdTaskResult extends TaskResult {
  rejectionReason: String | Null

  validate() {
    // rejectionReason is required when status is rejected
    (this.status != 'rejected') || (this.rejectionReason != null)
  }
}

type CompletedReviewAdTask extends CompletedTask {
  beforeAd: PublishableAd | Null, // null when ad was created
  afterAd: PublishableAd,
  result: ReviewAdTaskResult
}

type SubmissionTask extends Task {
  submission: Submission,
}

type SubmissionTaskResult extends TaskResult {
  adProps: AdProps | Null

  validate() {
    // adProps is required when status is accepted
    (this.status != 'accepted') || (this.adProps != null)
  }
}

type CompletedSubmissionTask extends CompletedTask {
  submission: Submission,
  result: SubmissionTaskResult,
}

type ExternalUserEngagement {
  channel: String,
  content: String,
  createdAt: InitialTimestamp

  validate() {
    (this.channel === 'email') ||
    (this.channel === 'sms') ||
    (this.channel === 'manualMessage')
  }
}

type ConvertExternalUserTask extends Task {
  externalUser: ExternalUser,
  engagements: Any | Null // validated at a lower level
}

type ConvertExternalUserTaskResult {
  status: String,
  comment: String | Null,

  validate() {
    (this.status == 'converted') ||
    (this.status == 'userDeletedAds') ||
    (this.status == 'archived')
  }
}

type CompletedConvertExternalUserTask extends CompletedTask {
  externalUser: ExternalUser,
  engagements: Any | Null // validated at a lower level
  result: ConvertExternalUserTaskResult
}

type AdTitle extends String {
  validate() { this.length > 0 && this.length <= 150 }
}

type AdBody extends String {
  validate() { this.length <= 2000 }
}

type DraftAd {
  title: String | Null,
  body: String | Null,
  price: Price | Null,
  category: String | Null,
  images: Map<String, Image> | Null,
}

type Source {
  name: String,
  url: String,
  images: Map<String, Image> | Null,
  lastCheckedAt: Number | Null
}

type Submission extends DraftAd {
  location: String | Null,
  originalId: String | Null,
  url: String | Null,
  source: String | Null,
  seller: String | Null,
  submitter: String | Null,
}

type SellerType extends String {
  validate() {
    (this == 'user') ||
    (this == 'externalUser')
  }
}

type AdProps {
  title: AdTitle,
  body: AdBody,
  price: Price,
  category: String,
  location: Location,
  images: Map<String, Image>,
  sold: Boolean | Null,

  validate() {
    this.images != null
  }
}

type Thumbnail extends Image {
  dimensions: Dimensions | Null // TODO: Sometimes getting image dimensions fails??? Need to deal with this case.
}

type AdInternalProps {
  imageDimensions: Map<String, Dimensions> | Null,
  thumbnail: Thumbnail | Null,
}

type PublishableAd {
  props: Any, // validated at a lower level
  internalProps: AdInternalProps | Null,
  seller: String,
  sellerType: SellerType,
  source: String | Null,
  createdAt: Number
}

type Provider {
  displayName: String | Null,
  email: Email | Null,
  phoneNumber: PhoneNumber | Null,
  photoURL: URL | Null,
  providerId: String,
  uid: String,

  validate() {
    requireWhenAuthenticatedWithSocial(this.displayName, this.providerId) &&
    requireWhenAuthenticatedWithSocial(this.email, this.providerId) &&
    requireWhenAuthenticatedWithPhone(this.phoneNumber, this.providerId) &&
    requireWhenAuthenticatedWithSocial(this.photoURL, this.providerId)
  }
}

// This is set on the client by react-redux-firebase,
// and is publicly available
type Profile {
  name: String,
  phone: PhoneNumber | Null,
  providerIds: Map<String, Any> | Null
}

type Avatar extends Image {
  originalUrl: String
}

type User {
  providerData: Map<String, Provider> | Null,
  email: Email | Null,
  phone: PhoneNumber | Null,
  locale: String | Null,
  location: UserLocation | Null,
  ip: IPv4 | Null,
  adult: Boolean | Null,
  // Public below
  profile: Profile | Null,
  avatar: Avatar | Null,
}

// Represents an entity (business or person) that may not be a registered user yet
type ExternalUser {
  email: String | Null,
  url: String | Null,
  location: String | Null,
  // Public below
  profile: Profile,
  avatar: Map<String, Image> | Null, // actually only one image is stored, but using Map to use react-redux-firebase uploadFile()
  user: String | Null, // Only set when the seller has registered
}

type Conversation {
  ad: String,
  buyer: String,
  lastMessageReceivedAt: Number | Null,
  lastActiveAt: CurrentTimestamp | Null,
  notified: Boolean | Null,
}

type Message {
  body: String,
  fromBuyer: Boolean,
  createdAt: InitialTimestamp,
}

type SupportMessageBody extends String {
  validate() { this.length > 0 && this.length <= 400 }
}

type SupportMessage {
  email: Email,
  subject: String | Null,
  body: SupportMessageBody
  uid: String | Null
}

type Rating {
  stars: Number,
  body: String | Null,
  currentUrl: String | Null,
  user: String | Null,
  ip: String | Null,
  userAgent: Map<String, Any> | Null,
  createdAt: InitialTimestamp
}

// ------------------------------------
// Functions
// ------------------------------------
isAuthenticated() { auth != null }
isAnonymous() { isAuthenticated() && auth.provider == 'anonymous' }
isNotAnonymous() { isAuthenticated() && auth.provider != 'anonymous' }
isAuthenticatedWithPhone() { auth != null && auth.provider == 'phone' }
isCurrentUser(uid) { (auth != null && auth.uid == uid) }
categoryIsValid(categoryId) { root.categories[categoryId] != null }
adIsValid(adId) { root.ads[adId] != null }
userIsValid(uid) { root.users[uid] != null }
localeIsValid(localeId) { root.locales[localeId] != null }
isSocialProvider(providerId) { providerId == 'google' || providerId == 'facebook.com' || providerId == 'twitter' || providerId == 'github' }
requireWhenAuthenticatedWithSocial(value, providerId) { value != null || !isSocialProvider(providerId) }
requireWhenAuthenticatedWithPhone(value, providerId) { value != null || providerId != 'phone' }
setOnce(value) { (prior(value) == null) || (value == prior(value)) }
initial(value, init) { value == (prior(value) == null ? init : prior(value)) }
initialValueIs(value, init) { prior(value) != null || value == init }
isSeller(adId) {
  auth != null &&
  (
    (root.sellerAds[auth.uid].published[adId] != null) ||
    (root.sellerAds[auth.uid].rejected[adId] != null) ||
    (root.sellerAds[auth.uid].deleted[adId] != null)
  )
}
valueIsNow(value) { value == now }
requireUserHasIp(userId) { root.users[userId].ip != null }
isDevopsService() { auth.uid == 'DevopsService_hmH39L1i' }
isFirebaseFunctionsService() { auth.uid == 'FirebaseFunctionsService_13UjOUHT' }
isAdmin() { (auth.token.admin == true) || isDevopsService() || isFirebaseFunctionsService() }
equalAdProps(adProps1, adProps2) {
  (adProps1.title == adProps2.title) &&
  (adProps1.body == adProps2.body) &&
  (adProps1.price == adProps2.price) &&
  (adProps1.category == adProps2.category) &&
  (adProps1.sold == adProps2.sold)
}
equalAds(ad1, ad2) {
  equalAdProps(ad1.props, ad2.props) &&
  (ad1.seller == ad2.seller) &&
  (ad1.sellerType == ad2.sellerType) &&
  (ad1.createdAt == ad2.createdAt)
}

// ------------------------------------
// Paths
// ------------------------------------

// General
path /locales is Locale[] {
  read() { true }
  write() { isDevopsService() }
  index() { return 'default' }
}

path /translations {
  read() { true }
  write() { isDevopsService() }
}

path /countryFlags is Image[] {
  read() { true }
  write() { isDevopsService() }
}

path /countryFlags/:countryCode is Image {
  read() { true }
  write() { isDevopsService() }
}

path /categories is Category[] {
  read() { true }
  write() { isDevopsService() }
}

path /locations {
  read() { isAdmin() }
  write() { isDevopsService() }
}

path /locations/{id} is Location {
}

path /rejectionReasons {
  read() { isAdmin() }
}

path /rejectionReasons/{id} {
  read() { true }
  write() { isDevopsService() }
}

path /messageTemplates {
  write() { isDevopsService() }
}

path /messageTemplates/{templateId}/{language} {
  read() { isAdmin() }
}

// Tasks

// - Ad Saved tasks
path /tasks/reviewAd {
  read() { isAdmin() }
}

path /tasks/reviewAd/{adId} is ReviewAdTask {
  create() { isFirebaseFunctionsService() }
  delete() { isAdmin() }

  validate() {
    root.ads[adId] != null
  }
}

path /completedTasks/reviewAd {
  read() { isAdmin() }
}

path /completedTasks/reviewAd/{adId}/{id} is CompletedReviewAdTask {
  create() { isAdmin() }
}

// - Submission tasks
path /tasks/submission {
  read() { isAdmin() }
}

path /tasks/submission/{id} is SubmissionTask {
  create() { isAdmin() }
  delete() { isAdmin() }
}

path /tasks/submission/{id}/submission is Submission {
  update() { isAdmin() }
}

path /completedTasks/submission {
  read() { isAdmin() }
}

path /completedTasks/submission/{id} is CompletedSubmissionTask {
  create() { isAdmin() }
}

// - Convert ExternalUser tasks
path /tasks/convertExternalUser {
  read() { isAdmin() }
}

path /tasks/convertExternalUser/{externalUserId} is ConvertExternalUserTask {
  create() { isFirebaseFunctionsService() }
  delete() { isAdmin() }

  validate() {
    (root.externalUsers[externalUserId] != null) &&
    (root.sellerAds[externalUserId].published != null) &&
    (root.completedTasks.convertExternalUserTasks[externalUserId] == null)
  }
}

path /tasks/convertExternalUser/{externalUserId}/engagements/{id} is ExternalUserEngagement {
  create() {
    isAdmin()
  }
}

path /completedTasks/convertExternalUser {
  read() { isAdmin() }
}

path /completedTasks/convertExternalUser/{externalUserId}/{id} is CompletedConvertExternalUserTask {
  create() { isAdmin() }
}

path /taskCounters {
  read() { isAdmin() }
}

path /taskCounters/{taskType} {
  write() { isFirebaseFunctionsService() }
}


// Ads
canWriteAd(ad) {
  (ad.sellerType == 'user' && isCurrentUser(ad.seller)) ||
  // TODO[MIGRATION-ONLY]: Disabled only for migration (uncomment below line, remove the 2nd line below)
  // (ad.sellerType == 'externalUser' && isAdmin())
  isAdmin()
}

// - Sources
path /sources {
  read() { isAdmin() }
}

path /sources/{id} is Source {
  read() { true }
  create() { isAdmin() }
  update() { isAdmin() }
  delete() { isAdmin() }
}

// - Draft
path /drafts/{uid} is DraftAd {
  read() { isCurrentUser(uid) || isFirebaseFunctionsService() }
  create() { isCurrentUser(uid) || isFirebaseFunctionsService() || isDevopsService() } // TODO[MIGRATION-ONLY]: `isDevopsService` is needed only for migration
  update() { isCurrentUser(uid) || isFirebaseFunctionsService() }
  delete() { isFirebaseFunctionsService() }
}

// - Published
path /ads {
  read() { isFirebaseFunctionsService() }
}

path /ads/{id} is PublishableAd {
  read() { true }
  create() {
    canWriteAd(this) &&
    (root.sellerAds[this.seller].rejected[id] == null) &&
    (root.sellerAds[this.seller].deleted[id] == null)
  }
  update() {
    isAdmin() &&
    (root.sellerAds[this.seller].rejected[id] == null) &&
    (root.sellerAds[this.seller].deleted[id] == null)
  }
  delete() {
    canWriteAd(prior(this)) &&
    // TODO[MIGRATION-ONLY]: Uncomment below when migration is done
    // equalAds(prior(this), root.sellerAds[prior(this).seller].deleted[id]) &&
    (root.sellerAds[prior(this).seller].published[id] == null)
  }

  validate() {
    // initial(this.createdAt, now) && // TODO[MIGRATION-ONLY]: disabled only for migration
    equalAds(this, root.sellerAds[this.seller].published[id]) &&
    categoryIsValid(this.props.category) // &&
    // TODO[MIGRATION-ONLY]: Uncomment the 5 lines below when done with migration
    // (
    //   (this.sellerType == 'externalUser') ||
    //   (this.props.location.address.country == root.users[this.seller].location.address.country) ||
    //   root.users[this.seller].location.address.country == null // TODO: Sometimes this is null. Need to address this issue.
    // )
  }
}

path /ads/{id}/internalProps is AdInternalProps {
  write() { isAdmin() }
}

path /ads/{id}/props is AdProps {
  update() { canWriteAd(this.parent()) }
}

path /ads/{id}/props/images {
  index() { return 'dimensions' }
}

// - By Seller
path /sellerAds/{sellerId}/published {
  read() { true }
}

path /sellerAds/{sellerId}/published/{id} is PublishableAd {
  create() { canWriteAd(this) }
  update() { isAdmin() }
  delete() {
    canWriteAd(prior(this)) &&
    (root.ads[id] == null)
  }

  validate() {
    equalAds(this, root.ads[id])
  }
}

path /sellerAds/{sellerId}/published/{id}/props is AdProps {
  update() { canWriteAd(this.parent()) }
}

path /sellerAds/{sellerId}/rejected {
  read() { isCurrentUser(sellerId) || isAdmin() }
}

path /sellerAds/{sellerId}/rejected/{id} {
  create() {
    isAdmin() &&
    (root.ads[id] == null) &&
    (root.sellerAds[sellerId].published[id] == null) &&
    (root.sellerAds[sellerId].deleted[id] == null)
  }
}

path /sellerAds/{sellerId}/deleted {
  read() { isAdmin() }
}

path /sellerAds/{sellerId}/deleted/{id} {
  create() {
    canWriteAd(this) &&
    (root.ads[id] == null) &&
    (root.sellerAds[sellerId].published[id] == null) &&
    (root.sellerAds[sellerId].rejected[id] == null)
  }
}

// Users
path /users {
  read() { isFirebaseFunctionsService() }

  index() { return ['email', 'phone'] }
}

path /users/{uid} is User {
  read() { isCurrentUser(uid) || isFirebaseFunctionsService() }
  create() { isCurrentUser(uid) }
  update() { isCurrentUser(uid) || isFirebaseFunctionsService() }

  validate() {
    (isAnonymous() || this.profile != null) &&
    (this.locale == null || localeIsValid(this.locale))
  }
}

path /users/{uid}/profile is Profile {
  read() { true }
}

path /users/{uid}/avatar is Avatar {
  read() { true }
}

// External Users
path /externalUsers {
  read() { isAdmin() }

  index() { return ['email', 'phone', 'code'] }
}

path /externalUsers/{id} is ExternalUser {
  write() { isAdmin() }

  validate() {
    setOnce(this.email) &&
    setOnce(this.profile.phone) &&
    (this.code == null || root.externalUserCodes[this.code] == id)
  }
}

path /externalUsers/{id}/profile is Profile {
  read() { true }
}

path /externalUsers/{id}/avatar {
  read() { true }
}

path /externalUsers/{id}/user {
  read() { true }
}

path /externalUserCodes {
  read() { isAdmin() }

  index() { return '.value' }
}

path /externalUserCodes/{id} {
  read() { true }
  create() { isAdmin() }

  validate() {
     (root.externalUsers[this] != null) &&
     setOnce(this)
  }
}

// Buyers
path /favorites/{uid} {
  read() { isCurrentUser(uid) }
}

path /favorites/{uid}/{adId} {
  read() { isCurrentUser(uid) }
  create() { isCurrentUser(uid) && isNotAnonymous() }
  delete() { isCurrentUser(uid) }

  validate() {
    adIsValid(adId)
  }
}

// Messages
path /myConversations/{uid} {
  read() { isCurrentUser(uid) || isFirebaseFunctionsService() }
  write() { isFirebaseFunctionsService() } // TODO: This is needed for externalUser migration. Could we do some validation?
}

path /myConversations/{uid}/{adIdBuyerId} is Conversation {
  read() { isCurrentUser(uid) || isFirebaseFunctionsService() }
  write() { isFirebaseFunctionsService() }

  index() { return 'lastMessageReceivedAt' }
}

path /myConversations/{uid}/{adIdBuyerId}/lastActiveAt is CurrentTimestamp {
  create() { isCurrentUser(uid) }
  update() { isCurrentUser(uid) }
}

path /messages/{adId}/{buyerId} {
  read() { isCurrentUser(buyerId) || isSeller(adId) }
}

path /messages/{adId}/{buyerId}/{messageId} is Message {
  create() { (isNotAnonymous() && isCurrentUser(buyerId)) || isSeller(adId) }
  update() { (this.fromBuyer && isCurrentUser(buyerId)) || (!this.fromBuyer && isSeller(adId)) }
  delete() { (this.fromBuyer && isCurrentUser(buyerId)) || (!this.fromBuyer && isSeller(adId)) }

  validate() {
    this.body.length > 0 &&
    userIsValid(buyerId) &&
    adIsValid(adId) &&
    ((this.fromBuyer && !isSeller(adId)) || (!this.fromBuyer && isSeller(adId))) &&
    buyerId != root.ads[adId].seller // seller can't send message to self
  }
}

path /messages/{adId} {
  read() { isSeller(adId) }
}

path /support/{id} is SupportMessage {
  create() { true }

  validate() {
    this.uid == null || this.uid == auth.uid
  }
}

path /ratings/{uid} is Rating {
  read() { isCurrentUser(uid) }
  create() { isCurrentUser(uid) }
  update() { isCurrentUser(uid) }
}


// TODO[MIGRATION-ONLY]: ONLY FOR MIGRATION
path /ads/draft {
  read() { isDevopsService() }
  write() { isDevopsService() }
}

path /ads/legacy {
  read() { isDevopsService() }
}

path /ads/published {
  read() { isDevopsService() }
}

path /ads/images {
  read() { isDevopsService() }
}

path /ads/legacy/{legacyAdId} {
  write() { isDevopsService() }
}

path /ads/published/{adId} {
  write() { isDevopsService() }
}

path /ads/images/{adId} {
  write() { isDevopsService() }
}

path /ads/byUser {
  write() { isDevopsService() }
}

path / {
  write() { isDevopsService() }
}